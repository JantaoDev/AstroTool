/*
 * class.display.cpp
 * Display class source file
 *
 * Project: AstroTool
 * Created on: 24.07.2016
 * Author: SergSXM (sergsxm@embedded.by)
 */

#include "class.display.h"

#define DISPLAY_OSC_FREQ2	(DISPLAY_OSC_FREQ * 2)
#define DISPLAY_LIGHT_CNT	(DISPLAY_LIGHT_TIME * DISPLAY_OSC_FREQ2 / 1000)

#define	DISPLAY_CMD_ENABLE	0xAF
#define	DISPLAY_CMD_DISABLE	0xAE
#define	DISPLAY_CMD_START_LINE	0xC0
#define	DISPLAY_CMD_PAGE	0xB8
#define	DISPLAY_CMD_COLUMN	0x00
#define	DISPLAY_CMD_ADC_CW	0xA0
#define	DISPLAY_CMD_ADC_CCW	0xA1
#define	DISPLAY_CMD_DUTY_CYCLE_32	0xA9
#define	DISPLAY_CMD_STATIC_DRIVE_OFF	0xA4
#define	DISPLAY_CMD_STATIC_DRIVE_ON	0xA5
#define	DISPLAY_CMD_RMW_START	0xE0
#define	DISPLAY_CMD_RMW_END	0xEE
#define	DISPLAY_CMD_RESET	0xE2

#define DISPLAY_CHIP_BOTH   3

const uint8_t Display::chartersData[28][14]=
{{0xF8,0xFC,0x06,0x02,0x06,0xFC,0xF8,0x1F,0x3F,0x60,0x40,0x60,0x3F,0x1F},{0x00,0x08,0x0C,0xFE,0xFE,0x00,
0x00,0x00,0x00,0x00,0x7F,0x7F,0x00,0x00},{0x08,0x0C,0x06,0x02,0x86,0xFC,0xF8,0x60,0x70,0x58,0x4E,0x47,
0x41,0x40},{0x08,0x0C,0x06,0x82,0xC6,0x7C,0x38,0x18,0x38,0x60,0x40,0x61,0x3F,0x1E},{0x00,0x80,0xF8,0x7E,
0xFE,0xFE,0x00,0x1C,0x1F,0x13,0x10,0x7F,0x7F,0x10},{0x7E,0x7E,0x42,0x42,0xC2,0x86,0x06,0x18,0x38,0x60,
0x40,0x60,0x3F,0x1F},{0xE0,0xF8,0x9C,0x86,0x82,0x00,0x00,0x1F,0x3F,0x61,0x40,0x61,0x3F,0x1E},{0x06,0x06,
0x02,0xC2,0xF2,0x3E,0x0E,0x00,0x00,0x7C,0x7F,0x03,0x00,0x00},{0x38,0x7C,0xC6,0x82,0xC6,0x7C,0x38,0x1E,
0x3F,0x61,0x40,0x61,0x3F,0x1E},{0x78,0xFC,0x86,0x02,0x86,0xFC,0xF8,0x00,0x40,0x41,0x61,0x3D,0x1F,0x03},
{0x00,0xE0,0xF8,0x1C,0x04,0xFE,0xFE,0x7E,0x7F,0x05,0x04,0x04,0x7F,0x7F},{0xFE,0xFE,0x82,0xC6,0xFC,0x38,
0x00,0x7F,0x7F,0x40,0x40,0x61,0x3F,0x1E},{0xF8,0xFC,0x06,0x02,0x06,0x0C,0x08,0x1F,0x3F,0x60,0x40,0x60,
0x38,0x18},{0xFE,0xFE,0x02,0x02,0x06,0xFC,0xF8,0x7F,0x7F,0x40,0x40,0x60,0x3F,0x1F},{0xFE,0xFE,0x42,0x42,
0x42,0x06,0x06,0x7F,0x7F,0x40,0x40,0x40,0x60,0x60},{0xFE,0xFE,0x82,0x82,0x82,0x06,0x06,0x7F,0x7F,0x00,
0x00,0x00,0x00,0x00},{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},{0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00,0x00,0x00},{0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x02,
0x02,0x02,0x02,0x02,0x02,0x02},{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x22,0x14,0x08,0x14,0x22,0x41},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0C,0x30,0x40,0x30,0x0C,0x03},{0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x46,0x49,0x49,0x49,0x49,0x49,0x31},{0x00,0x00,0x00,0x80,0x60,0x18,0x06,0x60,0x18,0x06,0x01,0x00,
0x00,0x00},{0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x01,0x01,0x01,0x0F,0x01,0x01,0x01},{0xE0,0xE0,0x00,0x00,
0x00,0xE0,0xE0,0x0F,0x0F,0x00,0x00,0x00,0x0F,0x0F},{0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x0F,0x0F,0x0F,
0x0F,0x0F,0x0F,0x0F},{0xE0,0xE0,0xC0,0xC0,0x80,0x80,0x00,0x0F,0x0F,0x07,0x07,0x03,0x03,0x01},{0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01}};

void Display::InitHardware(void) {
	DDRB = 0xFF;
	PORTB = 0xFF;
	DDRC |= 0x0F;
	PORTC &= ~0x0F;
	DDRD |= (1 << 4);
	PORTD |= (1 << 4);

	_delay_ms(50);
	SendCommand(DISPLAY_CMD_ENABLE, DISPLAY_CHIP_BOTH);
	SendCommand(DISPLAY_CMD_ADC_CW, DISPLAY_CHIP_BOTH);

    ClearScreen();
	WakeUp();
}

void Display::IntervalHandler(void) {
	PORTC ^= 1;
	if (lightCounter > 0) {
		lightCounter--;
		PORTD |= (1 << 4);
	} else {
		PORTD &= ~(1 << 4);
	}
}

void Display::SendCommand(uint8_t cmd, uint8_t chip) {
	PORTC &= ~(1 << 1);
	PORTB = cmd;
	PORTC |= ((chip & 0x03) << 2);
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	PORTC &= ~(0x03 << 2);
}

void Display::SendData(uint8_t data, uint8_t chip) {
	PORTC |= 1 << 1;
	PORTB = data;
	PORTC |= ((chip & 0x03) << 2);
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	PORTC &= ~(0x03 << 2);
}

void Display::PutColumn(uint8_t x, uint8_t y, uint8_t column, uint8_t mode) {
    if ((x > 121) || (y > 3)) {
        return;
    }
    uint8_t col;
    uint8_t page;
    uint8_t chip;
    if (x < 61) {
        col = x;
        page = 0x10 | y;
        chip = 1;
    } else {
        col = x - 61;
        page = 0x20 | y;
        chip = 2;
    }
    if ((col != cursorCol) || (page != cursorPage)) {
        SendCommand(DISPLAY_CMD_PAGE + (page & 0x0F), chip);
        SendCommand(DISPLAY_CMD_COLUMN + col, chip);
        cursorCol = col;
        cursorPage = page;
    }
    if (mode) {
        SendData(column ^ 0xFF, chip);
    } else {
        SendData(column, chip);
    }
    cursorCol++;
}

Display::Display(Interval * interval) {
	lightCounter = 0;
	interval->addListener(this, DISPLAY_OSC_FREQ2);
    InitHardware();
}

void Display::ClearScreen(void) {
    for (uint8_t i = 0; i < 4; i++) {
        SendCommand(DISPLAY_CMD_PAGE + i, DISPLAY_CHIP_BOTH);
        SendCommand(DISPLAY_CMD_COLUMN, DISPLAY_CHIP_BOTH);
        for (uint8_t j = 0; j < 61; j++) {
            SendData(0x00, DISPLAY_CHIP_BOTH);
        }
    }
    cursorCol = 0;
    cursorPage = 0;
    SendCommand(DISPLAY_CMD_PAGE, DISPLAY_CHIP_BOTH);
    SendCommand(DISPLAY_CMD_COLUMN, DISPLAY_CHIP_BOTH);
}

void Display::PutChar(uint8_t x, uint8_t y, uint8_t charter, uint8_t mode) {
    uint8_t rx;
    uint8_t ry;
    rx = 2 + x * 8;
    ry = y * 2;
    if (x == 0) {
    	rx--;
        PutColumn(rx++, ry, 0, mode);
    }
    for (uint8_t i = 0; i < 7; i++) {
        PutColumn(rx++, ry, chartersData[charter][i], mode);
    }
    PutColumn(rx++, ry, 0, mode);

    rx = 2 + x * 8;
    ry = y * 2 + 1;
    if (x == 0) {
    	rx--;
        PutColumn(rx++, ry, 0, mode);
    }
    for (uint8_t i = 0; i < 7; i++) {
        PutColumn(rx++, ry, chartersData[charter][7 + i], mode);
    }
    PutColumn(rx++, ry, 0, mode);
}

void Display::PutNumber(uint8_t x, uint8_t y, uint8_t digits, int16_t value, uint8_t mode) {
	if (value < 0) {
		PutChar(x++, y, DISPLAY_CHAR_MINUS, mode);
		digits--;
		value = 0 - value;
	}
	x = x + digits;
	for (uint8_t i = 0; i < digits; i++) {
		if ((i == 0) || (value != 0)) {
			PutChar(--x, y, value % 10, mode);
			value /= 10;
		} else {
			PutChar(--x, y, DISPLAY_CHAR_SPACE, mode);
		}
	}
}

void Display::PutPointNumber(uint8_t x, uint8_t y, uint8_t digits, int16_t value, uint8_t mode) {
	if (value < 0) {
		PutChar(x++, y, DISPLAY_CHAR_MINUS, mode);
		digits--;
		value = 0 - value;
	}
	int16_t max = 1;
	for (uint8_t i = 1; i < digits; i++) {
		max *= 10;
	}
	if (value < max) {
		x = x + digits;
		digits--;
		for (uint8_t i = 0; i < digits; i++) {
			if ((i < 2) || (value != 0)) {
				PutChar(--x, y, value % 10, mode);
				value /= 10;
			} else {
				PutChar(--x, y, DISPLAY_CHAR_SPACE, mode);
			}
			if (i == 0) {
				PutChar(--x, y, DISPLAY_CHAR_DOT, mode);
			}
		}
	} else {
		x = x + digits;
		for (uint8_t i = 0; i < digits; i++) {
			if ((i == 0) || (value != 0)) {
				PutChar(--x, y, value % 10, mode);
				value /= 10;
			} else {
				PutChar(--x, y, DISPLAY_CHAR_SPACE, mode);
			}
		}
	}
}

void Display::PutHexNumber(uint8_t x, uint8_t y, uint8_t digits, uint16_t value, uint8_t mode) {
	x = x + digits;
	for (uint8_t i = 0; i < digits; i++) {
		PutChar(--x, y, value & 0x0F, mode);
		value >>= 4;
	}
}


void Display::WakeUp(void) {
	lightCounter = DISPLAY_LIGHT_CNT;
}
